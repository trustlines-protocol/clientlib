version: 2.1

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:14.11

commands:
  yarn-install:
    description: "Install or restore cached dependencies and save cache."
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  run-code-coverage:
    description: "Run code coverage and upload report."
    parameters:
      flag:
        type: string
    steps:
      - run: yarn coverage -F << parameters.flag >>

  set-npm-auth-token:
    description: "Set Auth Token for NPM registry."
    steps:
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - yarn-install
      - run:
          name: Build Production
          command: yarn build
      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Run Linter
          command: yarn lint

  prettier:
    <<: *defaults
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Check Prettier
          command: yarn prettier:check

  unit-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Run Unit Tests
          command: yarn test:unit
      - run-code-coverage:
          flag: unit


  integration-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Run Integration Tests
          command: yarn test:integration
      - run-code-coverage:
          flag: integration

  build-e2e-image:
    <<: *defaults
    environment:
      DOCKER_REPO: trustlines/e2e
      LOCAL_IMAGE: e2e
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - checkout
      - run:
          name: Build docker image
          command: |
            docker build . -t $LOCAL_IMAGE
      - run:
          name: Save docker image
          command: |
            mkdir -p ~/images
            docker save --output ~/images/$LOCAL_IMAGE.tar $LOCAL_IMAGE
      - persist_to_workspace:
          root: "~"
          paths:
            - images

  deploy-latest-e2e-image:
    <<: *defaults
    environment:
      DOCKER_REPO: trustlines/e2e
      LOCAL_IMAGE: e2e
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - attach_workspace:
          at: "~"
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: Login to dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
      - run:
          name: Upload latest
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO:latest
            docker push $DOCKER_REPO:latest

  deploy-tag-e2e-image:
    <<: *defaults
    environment:
      DOCKER_REPO: trustlines/e2e
      LOCAL_IMAGE: e2e
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - attach_workspace:
          at: "~"
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: Login to dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
      - run:
          name: Upload tag $CIRCLE_TAG
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO:$CIRCLE_TAG
            docker push $DOCKER_REPO:$CIRCLE_TAG

  run-end2end-tests:
    <<: *defaults
    environment:
      DOCKER_REPO: trustlines/e2e
      LOCAL_IMAGE: e2e
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - attach_workspace:
          at: "~"
      - run:
          name: Checkout end2end repo
          command: |
            git clone https://github.com/trustlines-protocol/end2end.git
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: run end2end tests
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO
            cd end2end
            ./run-e2e.sh


  # Publishes tagged version to npm with tag `latest`
  deploy-latest:
    <<: *defaults
    steps:
      - attach_workspace:
          at: "~"
      - set-npm-auth-token
      - run:
          name: Publish latest to NPM
          command: yarn publish --tag latest

  # Publishes most recent develop version to npm with tag `dev`
  deploy-dev:
    <<: *defaults
    steps:
      - attach_workspace:
          at: "~"
      - set-npm-auth-token
      - run:
          name: Publish dev to NPM
          command: ./node_modules/.bin/fluid-publish devTag="dev"

workflows:
  version: 2
  default:
    jobs:
      - build-e2e-image:
          filters:
            tags:
              only: /^v.*/
      - deploy-latest-e2e-image:
          context: docker-credentials
          requires:
            - build-e2e-image
            - run-end2end-tests
          filters:
            branches:
              only: master
      - deploy-tag-e2e-image:
          context: docker-credentials
          requires:
            - build-e2e-image
            - run-end2end-tests
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - run-end2end-tests:
          requires:
            - build-e2e-image
          filters:
            tags:
              only: /^v.*/
      - build:
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - build
      - prettier:
          requires:
            - build
      - unit-test:
          requires:
            - build
      - integration-test:
          requires:
            - build
      - deploy-dev:
          context: npm-credentials
          requires:
            - unit-test
            - integration-test
            - run-end2end-tests
          filters:
            branches:
              only: master
      - deploy-latest:
          context: npm-credentials
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
